import groq
from config.settings import settings
import logging
import time
from typing import Optional

class LLMService:
    def __init__(self):
        if not settings.groq_api_key:
            raise ValueError("GROQ_API_KEY not found in environment variables")

        # Initialize Groq client
        self.client = groq.Groq(api_key=settings.groq_api_key)
        self.model = "openai/gpt-oss-120b"
        self.max_retries = 3
        self.retry_delay = 2  # seconds

    def generate_response(self, system_prompt: str, user_prompt: str, temperature: float = 0.7, max_tokens: int = 2048) -> str:
        """
        Generate response with enhanced error handling and retry logic.
        """
        last_exception = None

        for attempt in range(self.max_retries):
            try:
                response = self.client.chat.completions.create(
                    model=self.model,
                    messages=[
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": user_prompt}
                    ],
                    temperature=temperature,
                    max_tokens=max_tokens,
                    timeout=30  # Add timeout for better reliability
                )

                if response.choices and len(response.choices) > 0:
                    return response.choices[0].message.content
                else:
                    raise Exception("No response generated by the model")

            except groq.APIError as e:
                last_exception = e
                logging.warning(f"Groq API error (attempt {attempt + 1}/{self.max_retries}): {str(e)}")
                if attempt < self.max_retries - 1:
                    time.sleep(self.retry_delay * (attempt + 1))  # Exponential backoff

            except Exception as e:
                last_exception = e
                logging.error(f"Unexpected error (attempt {attempt + 1}/{self.max_retries}): {str(e)}")
                if attempt < self.max_retries - 1:
                    time.sleep(self.retry_delay)

        # If all retries failed
        error_msg = f"Failed to generate content after {self.max_retries} attempts: {str(last_exception)}"
        logging.error(error_msg)
        raise Exception(error_msg)